% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updateDependencies.R
\name{updateDependencies}
\alias{updateDependencies}
\title{Suggestions for updating dependencies}
\usage{
updateDependencies(full, updates, transitive = TRUE)
}
\arguments{
\item{full}{List produced by \code{\link{queryAllDependencies}}.}

\item{updates}{A data frame similar to that returned by \code{\link{scanFetchContentDeclare}},
specifying the projects to be updated and their new Git details or URLs.}

\item{transitive}{Logical scalar indicating whether the transitive dependencies of the projects in \code{updates} should be added to \code{updates}.}
}
\value{
List containing:
\itemize{
\item \code{initial}, a data frame containing the initial update request.
This contains the same information as \code{updates} if \code{transitive = FALSE};
otherwise, it will also contain the transitive dependencies of the projects in \code{updates}.
\item \code{dependencies}, a list of projects that require updates to their dependencies.
Each entry is itself a list that corresponds to a to-be-updated project, with properties described in the \code{project} data frame.
The \code{update} data frame desecribes the project's dependencies that need to be updated according to \code{initial}.
\item \code{top}, a data frame describing the dependencies to be updated for the top-level project,
i.e., the project used to define the dependencies to create \code{full}. 
}
}
\description{
When updating a project, the FetchContent call in its downstreams usually need to be updated, e.g., to a new GIT_TAG.
This function walks through the set of dependencies to determine which projects need to be updated, why, and in what order.
}
\examples{
# Setting up the repository:
df <- data.frame(
    name = "scran", 
    git.repository = "https://github.com/LTLA/libscran",
    git.tag = "ae74e0345303a2d2c6e70d599d72c0e02d346fb6",
    url = NA_character_,
    url.hash = NA_character_
)

path <- fetchDependencies(df)
out <- queryAllDependencies(path)

# Now considering some updates:
updates <- data.frame(
    name = "aarand", 
    git.repository = "https://github.com/LTLA/aarand",
    git.tag = "2a8509c499f668bf424306f1aa986da429902c71",
    url = NA_character_,
    url.hash = NA_character_
)

to.update <- updateDependencies(out, updates)

# Initial update request, including transitive dependencies:
to.update$initial

# Update order is easily obtained:
vapply(to.update$dependencies, function(x) x$project$name, "")

# Final set of updates at the top-level:
to.update$top

}
\author{
Aaron Lun
}
