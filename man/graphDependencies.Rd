% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphDependencies.R
\name{graphDependencies}
\alias{graphDependencies}
\title{Create a dependency graph}
\usage{
graphDependencies(full, short.names = TRUE, graph.only = FALSE)
}
\arguments{
\item{full}{List containing the output of \code{\link{queryAllDependencies}}.}

\item{short.names}{Logical scalar indicating whether to summarize each project with a string containing its name and row index in \code{full$dependencies}.}

\item{graph.only}{Logical scalar indicating whether to skip the plot.}
}
\value{
An \pkg{igraph} directed graph is returned where each node is a CMake project and edges are formed to its dependent projects.
Multiple edges may be created between two projects if it is required in multiple CMakeLists.txt files.

If \code{short.names=TRUE}, each node is named after the project name, with duplicates resolved by appending the row index in \code{full$dependencies}.
The source project is named as \code{"SOURCE"}.
Otherwise, the row index is used directly as the node name, with the source named as 0.

A plot is displayed on the current graphics device where all conflicts are marked in red and all impacted dependents are marked in orange.
All unaffected dependencies are marked in green.
}
\description{
Create a directed graph of the project dependencies,
highlighting conflicts and their impacts on the graph.
}
\examples{
df <- data.frame(
    name = "scran", 
    git.repository = "https://github.com/LTLA/libscran",
    git.tag = "ae74e0345303a2d2c6e70d599d72c0e02d346fb6",
    url = NA_character_,
    url.hash = NA_character_
)

path <- fetchDependencies(df)
out <- queryAllDependencies(path)
g <- graphDependencies(out)

}
